diff a/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/IndexBaseConfigurationRepository.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/IndexBaseConfigurationRepository.java	(rejected hunks)
@@ -230,2 +232,5 @@ public class IndexBaseConfigurationRepository implements ConfigurationRepository
                                 if (response != null && response.isExists()) {
+                                    LOGGER.info(
+                                            "{} index exist, so we try to load the config from it",
+                                            opendistrosecurityIndex);
                                     bgThread.start();
@@ -243,5 +248,10 @@ public class IndexBaseConfigurationRepository implements ConfigurationRepository
                                             bgThread.start();
+                                        } else if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_BACKGROUND_INIT_IF_SECURITYINDEX_NOT_EXIST, true)){
+                                            LOGGER.info(
+                                                    "{} index does not exist yet, use either securityadmin to initialize cluster or wait until cluster is fully formed and up",
+                                                    opendistrosecurityIndex);
+                                            bgThread.start();
                                         } else {
                                             LOGGER.info(
-                                                    "{} index does not exist yet, so no need to load config on node startup. Use securityadmin to initialize cluster",
+                                                    "{} index does not exist yet, use securityadmin to initialize the cluster. We will not perform background initialization",
                                                     opendistrosecurityIndex);
@@ -298,4 +309,24 @@ public class IndexBaseConfigurationRepository implements ConfigurationRepository
     
+    
+    private final Lock LOCK = new ReentrantLock();
+    
     @Override
-    public Map<String, Settings> reloadConfiguration(Collection<String> configTypes) {
+    public Map<String, Settings> reloadConfiguration(Collection<String> configTypes) throws ConfigUpdateAlreadyInProgressException {
+        try {
+            if (LOCK.tryLock(60, TimeUnit.SECONDS)) {
+                try {
+                    return reloadConfiguration0(configTypes);
+                } finally {
+                    LOCK.unlock();
+                }
+            } else {
+                throw new ConfigUpdateAlreadyInProgressException("A config update is already imn progress");
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            throw new ConfigUpdateAlreadyInProgressException("Interrupted config update");
+        }
+    }
+
+    private Map<String, Settings> reloadConfiguration0(Collection<String> configTypes) {
         Map<String, Tuple<Long, Settings>> loaded = loadConfigurations(configTypes, false);
